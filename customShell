#!/bin/bash
#author: Rudolf Suguitan - C13460538
#github: RudolfBSuguitan

#declaring global variables
INPUT="" #user input as string
INPUT_ARR="" #user input as array
TEMP="" #var containing commands
RUN="" #contains TEMP to run commands
declare -i COUNT=0 #counter
HOME_DIR="/home/$(whoami)"

#Displays all commands and their information
funcHelp(){
	echo -e "\n>> back"
	echo -e "\tGo back to previous directory."
	echo -e "\n>> cdir"
	echo -e "\tCreate a directory within your home.\n\tExample:\tcdir NameOfDirectory"
	echo -e "\n>> cfile"
        echo -e "\tCreate a file within your home.\n\tExample:\tcfile NameOfFile"
	echo -e "\n>> close"
	echo -e "\tThis command will close your terminal or\n\tlog you out if other user's account is being used."
	echo -e "\n>> clr"
	echo -e "\tClear the content of the screen."
	echo -e "\n>> del"
	echo -e "\tDelete a directory or a file within your home.\n\tExample:\tdel NameOfFileOrDirectory"
	echo -e "\n>> dt"
	echo -e "\tDisplay current date and time in this\n\tformat: year, month, day, hour, minutes, seconds."
	echo -e "\n>> go"
	echo -e "\tNavigate to specified directory.\n\tExample:\tgo NameOfDirectory"
	echo -e "\n>> how"
	echo -e "\tIt will display this information of all the commands."
	echo -e "\n>> ifc"
        echo -e "\tDisplays network settings and configuration.\n\tifc inteface \n\t\teth0, lo, wlan\n\tifc -a -s -v interface"
        echo -e "\t\t-a\tdisplay interface\n\t\t-s\tdisplay a short list\n\t\t-v\tmore verbose"
	echo -e "\n>> nedit"
        echo -e "\tEdits a file using nano.\n\tExample:nedit NameOfFile"
        echo -e "\n>> pw"
        echo -e "\tThis command prints your current working directory.\n\tYou are restricted to use any tail.\n\tIf tail is provided, it will be ignored."
	echo -e "\n>> show"
	echo -e "\tDisplay your files and directories in current directory."
	echo -e "\n>> ud"
	echo -e "\tDisplays user information in format:\n\t\tuserID:groupID:username:groupname:iNodeOfHomeDirectory"
	echo -e "\t-m\n\t\tTail to display information in more detail.\n"

	#echo -e "\n**For security purposes, you are not allowed to delete any file or directories.**"
	#echo -e "**Commad delete is not available. Contact root user.**\n"
} #end funcHelp

#Called when the user provided a tail
funcPwd(){
	for ((z=1; z<"${#INPUT_ARR[@]}"; z++))
	do
		#checks if the tail is a valid default tail
		if test "${INPUT_ARR[$z]}" == "-L" -o "${INPUT_ARR[$z]}" == "-P" -o "${INPUT_ARR[$z]}" == "--help" -o "${INPUT_ARR[$z]}" == "--version"
		then	#if valid, run the command but not including the tail
			echo -e "\nYou have no permission to use tail. Tail ignored."
                        echo -e "Current working directory: $(pwd)\n"
		else
			echo -e "\nERROR>UNKNOWN COMMAND TAIL: ${INPUT_ARR[$z]}\n"
		fi
	done
} #end fucnPwd

#Called when tail is provided
#Similar to funcPwd but it displays it output if command including tail and interface
#if no interface is provided, error is displayed
funcIfc(){
        TEMP="ifconfig "
	for ((z=1; z<"${#INPUT_ARR[@]}"; z++))
        do	#check if tail is valid default tail
                if test "${INPUT_ARR[$z]}" == "-a" -o "${INPUT_ARR[$z]}" == "-s" -o "${INPUT_ARR[$z]}" == "-v"
                then
			TEMP=$TEMP"${INPUT_ARR[$z]} "
		#check if valid default interface
		#there should be one and only one interface with ifc command
		elif test "${INPUT_ARR[$z]}" == "eth0" -o "${INPUT_ARR[$z]}" == "lo" -o "${INPUT_ARR[$z]}" == "wlan0"
		then
			TEMP=$TEMP"${INPUT_ARR[$z]}"
			((COUNT=$COUNT+1))
                else
                        echo -e "\nERROR>UNKNOWN COMMAND TAIL or INTERFACE: ${INPUT_ARR[$z]}\n"
			return 1
                fi
        done
	#checks for interface
	#error is displayed if there is more than one or no interface
	if [ "$COUNT" -ne 1 ];
	then
		echo -e "\nERROR WITH ifc COMMAND INTERFACE!\n";
	elif [ "$COUNT" -eq 1 ];
	then
		RUN=$($TEMP)
		echo -e "\n$RUN\n";
	fi
	#set back
	COUNT=0
        TEMP=""
} #end fucnIfc

#Create directory with the user's home
createDir(){
	#checks if there are spaces which are not allowed.
        if test "${#INPUT_ARR[@]}" -gt "2"
        then
                echo -e "\nOnly one directory can be created at a time and\nspaces are not allowed.\n"
        else	#checks if file or directory exist. Forces to create unique names
                if [[ -e "${INPUT_ARR[1]}" ]]
                then
                        echo -e "\nCannot create directory. Directory or file exists!.\n"
                else	#checks if it contains HOME_DIR to make sure the user stays within home
			if [[ "${INPUT_ARR[1]}" != *"$HOME_DIR"* ]]
                        then	#add HOME_DIT to input if it does not exists
                                TEMP="${INPUT_ARR[1]}"
                                TEMP="$(pwd)/"$TEMP
				#check again if file or directory exists to avoid repeated names
                                if [[ -e $TEMP ]]
                                then
                                        echo -e "\nCannot create directory. Directory or file exists!.\n"
                                else	#runs command without error output and check if successful
					mkdir $TEMP &> /dev/null
                                        if [ "$?" -eq "0" ]
                                        then
                                                echo -e "\nDirectory ${INPUT_ARR[1]} created.\n"
                                        else
                                                echo -e "\nError creating directory!\n"
                                        fi
                                fi
                        else	#same as the above but this part, the user has provided HOME_DIR at the start
                                if [[ -e "${INPUT_ARR[1]}" ]]
                                then
                                        echo -e "\nCannot create directory. Directory or file exists!.\n"
                                else
					mkdir "${INPUT_ARR[1]}" &> /dev/null
                                        if [ "$?" -eq "0" ]
                                        then
                                                echo -e "\nDirectory ${INPUT_ARR[1]} created.\n"
                                        else
                                                echo -e "\nError creating directory!\n"
                                      	fi
				fi
			fi
                fi
        fi
} #end createDir

#Create File within the home
#same process as funtion createDir
createFile(){
        if test "${#INPUT_ARR[@]}" -gt "2"
        then
                echo -e "\nOnly one file can be created at a time and\nspaces are not allowed.\n"
        else
                if [[ -e "${INPUT_ARR[1]}" ]]
                then
                        echo -e "\nCannot create file. File or directory exists!.\n"
                else
			if [[ "${INPUT_ARR[1]}" != *"$HOME_DIR"* ]]
                        then
                                TEMP="${INPUT_ARR[1]}"
                                TEMP="$(pwd)/"$TEMP

                                if [[ -e $TEMP ]]
                                then
                                        echo -e "\nCannot create file. File or directory exists!.\n"
                                else
                                        touch $TEMP &> /dev/null
					if [ "$?" -eq "0" ]
					then
						echo -e "\nFile ${INPUT_ARR[1]} created!!!.\n"
					else
						echo -e "\nError creating file!\n"
					fi
                                fi
                        else
                                if [[ -e "${INPUT_ARR[1]}" ]]
                                then
                                        echo -e "\nCannot create file. File or directory exists!.\n"
                                else
					touch "${INPUT_ARR[1]}" &> /dev/null
					if [ "$?" -eq "0" ]
                			then
						echo -e "\nFile ${INPUT_ARR[1]} created!!.\n"
					else
						echo -e "\nError creating file!\n"
					fi
                                fi
                        fi

                fi
        fi
} #end createFile

#edit a file using nano
#again, the same process as the above to avoid user going outside its home
#checks if input is a file or directory and displays error if its a directory
editFile(){
        if test "${#INPUT_ARR[@]}" -gt "2"
        then
                echo -e "\nOnly one file can be edited at a time!\n"
        else
                if [[ -e "${INPUT_ARR[1]}" ]]
                then
			if [[ "${INPUT_ARR[1]}" != *"$HOME_DIR"* ]]
                	then
                        	TEMP="${INPUT_ARR[1]}"
                        	TEMP="$(pwd)/"$TEMP

                        	if [[ -e $TEMP && ! -d $TEMP ]]
                        	then
                                	nano $TEMP
                        	else
                                	echo -e "\nERROR! No such file:  $TEMP\n"
                        	fi
                	else
				if [[ -e "${INPUT_ARR[1]}" && ! -d "${INPUT_ARR[1]}" ]]
                                then
                                        nano "${INPUT_ARR[1]}"
                                else
                                        echo -e "\nERROR! No such file:  ${INPUT_ARR[1]}\n"
                                fi
                	fi
		else
			echo -e "\nFile does not exist!.\n"
		fi
        fi
} #end editFile

#Allows user to delete directories and files within its home
#only allows 1 delete at a time
funcDel(){
        if test "${#INPUT_ARR[@]}" -gt "2"
        then
                echo -e "\nOnly one file or directory can be deleted at a time!\n"
                return 1
        else	#check if input exists
		if [[ -e "${INPUT_ARR[1]}" ]]
                then	#then add HOME_DIR at the start of input if it does not exist
			#this avoids going outside home
                        if [[ "${INPUT_ARR[1]}" != *"$HOME_DIR"* ]]
                        then
                                TEMP="${INPUT_ARR[1]}"
                                TEMP="$(pwd)/"$TEMP
				#checks again if its valid then if its a file or directory to do proper delete
                                if [[ -e $TEMP ]]
                                then
					if [[ -d $TEMP ]]
                                	then
                                        	rm -r $TEMP #for directories
                                	else
						rm $TEMP #for files
					fi
				else
                                        echo -e "\nERROR! No such file or directory:  $TEMP\n"
                                fi
                        else	#same process as the above but user has provided HOME_DIR
                                if [[ -e "${INPUT_ARR[1]}" ]]
                                then
					if [[ -d "${INPUT_ARR[1]}" ]]
					then
                                        	rm -r "${INPUT_ARR[1]}"
					else
						rm "${INPUT_ARR[1]}"
					fi
                                else
                                        echo -e "\nERROR! No such file or directory:  ${INPUT_ARR[1]}\n"
                                fi
                        fi
                else
                        echo -e "\nFile or directory does not exist!.\n"
                fi
        fi
} #end funcDel

#displays some user information in one line and less detail
funcUser(){
	TEMP="/SystemsIntegration/bin/id -u "
	TEMP=$TEMP$whoami
	RUN=$($TEMP)
	echo -e -n "\n$RUN"

	TEMP="/SystemsIntegration/bin/id -g "
	TEMP=$TEMP$whoami
	RUN=$($TEMP)
	echo -e -n ":$RUN"

	TEMP="/SystemsIntegration/bin/whoami"
	RUN=$($TEMP)
	echo -e -n ":$RUN"

	TEMP="/SystemsIntegration/bin/id -gn "
	TEMP=$TEMP$whoami
	RUN=$($TEMP)
	echo -e -n ":$RUN"

	TEMP="/SystemsIntegration/bin/stat -c %i "
	TEMP=$TEMP$HOME_DIR
	RUN=$($TEMP)
	echo -e -n ":$RUN\n\n"
} #end funcUser

#display some user information in detail using a tail
funcUserTail(){
	for ((z=1; z<"${#INPUT_ARR[@]}"; z++))
        do	#check id tail is valid and there is only one
		if test "${INPUT_ARR[$z]}" == "-m"
		then
			((COUNT=$COUNT+1))
		else
			echo -e "\nERROR>UNKNOWN COMMAND TAIL: ${INPUT_ARR[$z]}\n"
			return 1
		fi
	done
	#displays information in detail if tail is valid
	if [ "$COUNT" -ne 1 ];
        then
                echo -e "\nERROR WITH ud COMMAND!\n";
        elif [ "$COUNT" -eq 1 ];
        then
                TEMP="/SystemsIntegration/bin/id -u "
        	TEMP=$TEMP$whoami
        	RUN=$($TEMP)
        	printf "\nUser ID:\t$RUN"

        	TEMP="/SystemsIntegration/bin/id -g "
        	TEMP=$TEMP$whoami
        	RUN=$($TEMP)
        	printf "\nGroup ID:\t$RUN"

        	TEMP="/SystemsIntegration/bin/whoami"
        	RUN=$($TEMP)
        	printf "\nUsername:\t$RUN"

        	TEMP="/SystemsIntegration/bin/id -gn "
        	TEMP=$TEMP$whoami
        	RUN=$($TEMP)
        	printf "\nGroup Name:\t$RUN"

        	TEMP="/SystemsIntegration/bin/stat -c %i "
        	TEMP=$TEMP$HOME_DIR
        	RUN=$($TEMP)
        	printf "\nHome iNode:\t$RUN\n\n"
        fi
	#set back
        COUNT=0
        TEMP=""
} #end funcUserTail

#Go back to previous directory
#Displays error when use in home directory
directoryBack(){
	if test "$(pwd)" == $HOME_DIR
	then
		echo -e "\nCannot go back beyond this point!\n"
	else
		cd ..
	fi
} #end directoryBack

#Navigate from directory to another
directoryGo(){
	if [[ -d "${INPUT_ARR[1]}" ]] #if directory exists
        then
		#checks if user is trying to navigate out its home
		if [[ "${INPUT_ARR[1]}" != *"$HOME_DIR"* ]]
		then
			#avoiding user to navigate outside by appending HOME_DIR at the start if it doesnt exist
			TEMP="${INPUT_ARR[1]}"
			TEMP="$(pwd)/"$TEMP

			if [[ -d $TEMP ]]
        		then
				cd $TEMP #navigate if directory exist whithin users's home
			else
				echo -e "\nThis is not a directory: $TEMP\n"
			fi
		else
			cd "${INPUT_ARR[1]}" #navigate if its a valid user's home directory
		fi
	else
		echo -e "\nThis is not a directory: ${INPUT_ARR[1]}\n"
	fi
} #end directoryGo

#Checked if array is greater than 2 which means that the command has a tail
#or just an error
#this is checked by calling functions and do the processes
funcInput(){
	if test "${#INPUT_ARR[@]}" -gt "1"
	then
		if test "${INPUT_ARR[0]}" == "pw"
        	then
                	funcPwd
                        INPUT="none"
        	elif test "${INPUT_ARR[0]}" == "ifc"
        	then
                	funcIfc
                        INPUT="none"
        	elif test "${INPUT_ARR[0]}" == "ud"
        	then
                        funcUserTail
                        INPUT="none"
                elif test "${INPUT_ARR[0]}" == "cdir"
                then
                        createDir
                        INPUT="none"
		elif test "${INPUT_ARR[0]}" == "cfile"
                then
                        createFile
                        INPUT="none"
		elif test "${INPUT_ARR[0]}" == "go"
                then
                        directoryGo
                        INPUT="none"
		elif test "${INPUT_ARR[0]}" == "nedit"
                then
                        editFile
                        INPUT="none"
		elif test "${INPUT_ARR[0]}" == "del"
                then
                        funcDel
                        INPUT="none"
                fi
	fi
} #end funcInput

#main
clear
cd $HOME_DIR
echo -e "\nWelcome $(whoami)!"
echo -e "This is your custom shell"
echo -e "For help, enter command: how\n"

i=1 #Used to make an infinite while loop to keep the program runnning
while [ $i -eq 1 ]
do	#displays user and directory line in default shell. tput is used to change color
	echo -e -n "$(tput setaf 5)$(whoami)$(tput sgr0)@$(tput setaf 6)$(pwd)$(tput sgr0)\n$ "
	#wait for user input
	read INPUT
	#if null, ie pressed enter
	if [[ -z $INPUT ]]
	then	#go new line and display the above
		INPUT="none"
	else	#convert input to array then call funcInput
		INPUT_ARR=( $INPUT )
		funcInput
	fi
	#calls functions or display output of other commands.
	#displays error if command is unknown
	case $INPUT in
                "how")
			clear
			funcHelp;;
		"dt")
			echo -e "\nTodays date is: $(/SystemsIntegration/bin/date +%Y%m%d%H%M%S)\n";;
		"pw")
			echo -e "\nCurrent working directory: $(/bin/pwd)\n";;
		"ifc")
			echo -e "\n$(ifconfig eth0)\n";;
		"ud")
			funcUser;;
		"show")
			echo -e ""
			ls -p --color
			echo -e "";;
		"back")
			directoryBack;;
		"clr")
			clear;;
		"none")
			echo -n "";;
                "close")
			clear
			echo -e "\n\tYou will now be logged out of your system, $(whoami)!\n"
			sleep 1.5 #wait for 1.5 secs
			reset #deletes what can the output on the screen before exit
			exit;;
                *) echo -e "\nUNKNOWN ERROR WITH COMMAND: $INPUT\nFor help, enter command: how\n";;
        esac
done
