#!/bin/bash
#github: RudolfBSuguitan2
#Please read ReadMe file
#etc/password to change shell or use -s
#use -m flag to create home directory
#useradd -m rv
#sudo passwd rv
#sudo usermod -s /NetworkingShell/sishell

INPUT=""
INPUT_ARR=""
TEMP=""
RUN=""
declare -i COUNT=0
HOME_DIR="/home/$(whoami)"

funcHelp(){
	echo -e "\n>> close"
	echo -e "\tThis command will close your terminal or\n\tlog you out if other user's account is being used."
	echo -e "\n>> clr"
	echo -e "\tClears content of the screen."
	echo -e "\n>> dt"
	echo -e "\tDisplays current date and time in this\n\tformat: year, month, day, hour, minutes, seconds."
	echo -e "\n>> how"
	echo -e "\tIt will display this information."
	echo -e "\n>> ifc"
        echo -e "\tDisplays network settings and configuration.\n\tifc inteface \n\t\teth0, lo, wlan\n\tifc -a -s -v interface"
        echo -e "\t\t-a\tdisplay interface\n\t\t-s\tdisplay a short list\n\t\t-v\tmore verbose"
        echo -e "\n>> pw"
        echo -e "\tThis command prints your current working directory.\n\tYou are restricted to use any tail.\n\tIf tail is provided, it will be ignored."
	echo -e "\n>> show"
	echo -e "\tDisplay your files and directories in current directory."
	echo -e "\n>> ud"
	echo -e "\tDisplays user information in format:\n\t\tuserID:groupID:username:groupname:iNodeOfHomeDirectory"
	echo -e "\t-m\n\t\tTail to display information in more detail.\n"
}

funcPwd(){
	for ((z=1; z<"${#INPUT_ARR[@]}"; z++))
	do
		if test "${INPUT_ARR[$z]}" == "-L" -o "${INPUT_ARR[$z]}" == "-P" -o "${INPUT_ARR[$z]}" == "--help" -o "${INPUT_ARR[$z]}" == "--version"
		then
			echo -e "\nYou have no permission to use tail. Tail ignored."
                        echo -e "Current working directory: $(pwd)\n"
		else
			echo -e "\nERROR>UNKNOWN COMMAND TAIL: ${INPUT_ARR[$z]}\n"
		fi
	done
}

funcIfc(){
        TEMP="ifconfig "
	for ((z=1; z<"${#INPUT_ARR[@]}"; z++))
        do
                if test "${INPUT_ARR[$z]}" == "-a" -o "${INPUT_ARR[$z]}" == "-s" -o "${INPUT_ARR[$z]}" == "-v"
                then
			TEMP=$TEMP"${INPUT_ARR[$z]} "
		elif test "${INPUT_ARR[$z]}" == "eth0" -o "${INPUT_ARR[$z]}" == "lo" -o "${INPUT_ARR[$z]}" == "wlan0"
		then
                        #error check to make sure an interface is include and no repitition including with tails
			TEMP=$TEMP"${INPUT_ARR[$z]}"
			((COUNT=$COUNT+1))
                else
                        echo -e "\nERROR>UNKNOWN COMMAND TAIL or INTERFACE: ${INPUT_ARR[$z]}\n"
			return 1
                fi
        done

	if [ "$COUNT" -ne 1 ];
	then
		echo -e "\nERROR WITH ifc COMMAND INTERFACE!\n";
	elif [ "$COUNT" -eq 1 ];
	then
		RUN=$($TEMP)
		echo -e "\n$RUN\n";
	fi
	COUNT=0
        TEMP=""
}

funcUser(){
	TEMP="id -u "
	TEMP=$TEMP$whoami
	RUN=$($TEMP)
	echo -e -n "\n$RUN"

	TEMP="id -g "
	TEMP=$TEMP$whoami
	RUN=$($TEMP)
	echo -e -n ":$RUN"

	TEMP="whoami"
	RUN=$($TEMP)
	echo -e -n ":$RUN"

	TEMP="id -gn "
	TEMP=$TEMP$whoami
	RUN=$($TEMP)
	echo -e -n ":$RUN"

	TEMP="stat -c %i "
	TEMP=$TEMP$HOME_DIR
	RUN=$($TEMP)
	echo -e -n ":$RUN\n\n"

}

funcUserTail(){
	for ((z=1; z<"${#INPUT_ARR[@]}"; z++))
        do
		if test "${INPUT_ARR[$z]}" == "-m"
		then
			((COUNT=$COUNT+1))
		else
			echo -e "\nERROR>UNKNOWN COMMAND TAIL: ${INPUT_ARR[$z]}\n"
			return 1
		fi
	done

	if [ "$COUNT" -ne 1 ];
        then
                echo -e "\nERROR WITH ud COMMAND!\n";
        elif [ "$COUNT" -eq 1 ];
        then
                TEMP="id -u "
        	TEMP=$TEMP$whoami
        	RUN=$($TEMP)
        	printf "\nUser ID:\t$RUN"

        	TEMP="id -g "
        	TEMP=$TEMP$whoami
        	RUN=$($TEMP)
        	printf "\nGroup ID:\t$RUN"

        	TEMP="whoami"
        	RUN=$($TEMP)
        	printf "\nUsername:\t$RUN"

        	TEMP="id -gn "
        	TEMP=$TEMP$whoami
        	RUN=$($TEMP)
        	printf "\nGroup Name:\t$RUN"

        	TEMP="stat -c %i "
        	TEMP=$TEMP$HOME_DIR
        	RUN=$($TEMP)
        	printf "\nHome iNode:\t$RUN\n\n"
        fi
        COUNT=0
        TEMP=""
}

funcInput(){
	if test "${INPUT_ARR[0]}" == "pw"
        then
                if test "${#INPUT_ARR[@]}" -gt "1"
                then
			funcPwd
			INPUT="none"
                fi
        elif test "${INPUT_ARR[0]}" == "ifc"
        then
                if test "${#INPUT_ARR[@]}" -gt "1"
                then
			funcIfc
			INPUT="none"
                fi
	elif test "${INPUT_ARR[0]}" == "ud"
	then
		if test "${#INPUT_ARR[@]}" -gt "1"
                then
                        funcUserTail
                        INPUT="none"
                fi
	fi
}


clear
cd $HOME_DIR
echo -e "\nWelcome $(whoami)!"
echo -e "This is your custom shell"
echo -e "For help, enter command: how\n"

i=1 #Used to make an infinite while loop to keep the program runnning
while [ $i -eq 1 ]
do
	echo -e -n "$(whoami)@$(pwd)\n$ "

	read INPUT

	if [[ -z $INPUT ]]
	then
		INPUT="none"
	else
		INPUT_ARR=( $INPUT )
		funcInput
	fi

	case $INPUT in
                "how")
			clear
			funcHelp;;
		"dt")
			echo -e "\nTodays date is: $(date +%Y%m%d%H%M%S)\n";;
		"pw")
			echo -e "\nCurrent working directory: $(type pwd)\n";;
		"ifc")
			echo -e "\n$(ifconfig eth0)\n";;
		"ud")
			funcUser;;
		"show")
			echo -e "\n$(ls --file-type)\n";;
		"n")
			echo -e -n "\nFolder name: "
			read FNAME
			mkdir $FNAME;;
		"clr")
			clear;;
		"none")
			echo -n "";;
                "close")
			clear
			echo -e "\n\tYou will now be logged out of your system, $(whoami)!\n"
			sleep 2
			reset
			exit;;
                *) echo -e "\nERROR>UNKNOWN COMMAND: $INPUT\nFor help, enter command: how\n";;
        esac
done
