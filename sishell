#!/bin/bash
#github: RudolfBSuguitan2
#Please read ReadMe file
#etc/password to change shell or use -s
#use -m flag to create home directory

INPUT
INPUT_ARR
temp
run
IFC_TAIL="-a -s -v"
IFC_TAIL2=( $IFC_TAIL )
IFC_INT="eth0 lo wlan0"
IFC_INT2=( $IFC_INT )

funcHelp(){
	echo -e "\n>> close"
	echo -e "\tThis command will close your terminal or\n\tlog you out if other user's account is being used\n"
	echo -e "\n>> dt"
	echo -e "\tDisplays current date and time in this\n\tformat: year, month, day, hour, minutes, seconds\n"
        echo -e "\n>> pw"
        echo -e "\tThis command prints your current working directory.\n\tYou are restricted to use any tail.\n\tIf tail is provided, it will be ignored.\n"
        echo -e "\n>> ifc"
        echo -e "\tDisplays network settings and configuration.\n"
}

funcPwd(){
	for ((z=1; z<"${#INPUT_ARR[@]}"; z++))
	do
		if test "${INPUT_ARR[$z]}" == "-L" -o "${INPUT_ARR[$z]}" == "-P" -o "${INPUT_ARR[$z]}" == "--help" -o "${INPUT_ARR[$z]}" == "--version"
		then
			echo -e "\nYou have no permission to use tail. Tail ignored."
                        echo -e "Current working directory: $(pwd)\n"
			break
		else
			echo -e "\nERROR>UNKNOWN COMMAND TAIL: ${INPUT_ARR[$z]}\n"
			break
		fi
	done
}

funcIfc(){
        temp="ifconfig "
	for ((z=1; z<"${#INPUT_ARR[@]}"; z++))
        do
                if test "${INPUT_ARR[$z]}" == "-a" -o "${INPUT_ARR[$z]}" == "-s" -o "${INPUT_ARR[$z]}" == "-v"
                then
			temp=$temp"${INPUT_ARR[$z]} "
		elif test "${INPUT_ARR[$z]}" == "eth0" -o "${INPUT_ARR[$z]}" == "lo" -o "${INPUT_ARR[$z]}" == "wlan0"
		then
                        ##error check to make sure an interface is include and no repitition including with tails
			temp=$temp"${INPUT_ARR[$z]}"
                        run=$($temp)
                        echo -e "\n$run\n"
			break
                else
                        echo -e "\nERROR>UNKNOWN COMMAND TAIL or INTERFACE: ${INPUT_ARR[$z]}\n"
                        break
                fi
        done
        temp=""
}

funcInput(){
	if test "${INPUT_ARR[0]}" == "pw"
        then
                if test "${#INPUT_ARR[@]}" -gt "1"
                then
			funcPwd
			INPUT="none"
                fi
        elif test "${INPUT_ARR[0]}" == "ifc"
        then
                if test "${#INPUT_ARR[@]}" -gt "1"
                then
			funcIfc
			INPUT="none"
                fi
	 fi
}


clear
cd "/home/$(whoami)"
echo -e "\nWelcome $(whoami)!"
echo -e "This is your custom shell"
echo -e "For help, enter command: how\n"

i=1 #Used to make an infinite while loop to keep the program runnning
while [ $i -eq 1 ]
do
	echo -n "$(whoami)@$(pwd):$> "

	read INPUT

	if [[ -z $INPUT ]]
	then
		INPUT="none"
	else
		INPUT_ARR=( $INPUT )
		funcInput
	fi

	case $INPUT in
                "how")
			funcHelp;;
		"dt")
			echo -e "\nTodays date is: $(date +%Y%m%d%H%M%S)\n";;
		"1")
			funcPwd;;
		"pw")
			echo -e "\nCurrent working directory: $(type pwd)\n";;
		"ifc")
			echo -e "\n$(ifconfig eth0)\n";;
		"2")
			funcIfc;;
		"show")
			echo -e "\n$(ls --file-type)\n";;
		"n")
			echo -e -n "\nFolder name: "
			read FNAME
			mkdir $FNAME;;
		"clr")
			clear;;
		"none")
			echo -n "";;
                "close")
			echo -e "\nGoodbye\n"
			exit;;
                *) echo -e "\nERROR>UNKNOWN COMMAND: $INPUT\nFor help, enter command: how\n";;
        esac
done
